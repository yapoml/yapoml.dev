"use strict";(self.webpackChunkyapoml=self.webpackChunkyapoml||[]).push([[72],{4946:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"concepts/syntax","title":"Syntax","description":"Define your page objects with ease and start to automate immediately","source":"@site/docs/concepts/syntax.md","sourceDirName":"concepts","slug":"/concepts/syntax","permalink":"/docs/concepts/syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/yapoml/yapoml.github.io/tree/main/docs/concepts/syntax.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Syntax","description":"Define your page objects with ease and start to automate immediately","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/intro"},"next":{"title":"Interactions","permalink":"/docs/concepts/interactions"}}');var t=s(4848),o=s(8453);const i={title:"Syntax",description:"Define your page objects with ease and start to automate immediately",sidebar_position:1},r="Syntax",c={},l=[{value:"Page",id:"page",level:2},{value:"Url",id:"url",level:3},{value:"Component",id:"component",level:2},{value:"Locator",id:"locator",level:3},{value:"List of components",id:"list-of-components",level:3},{value:"Nested",id:"nested",level:3},{value:"Parametrized locator",id:"parametrized-locator",level:3},{value:"Reusable components",id:"reusable-components",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"syntax",children:"Syntax"})}),"\n",(0,t.jsxs)(n.p,{children:["Pages and components are declared in ",(0,t.jsx)(n.code,{children:"*.page.yaml"})," and ",(0,t.jsx)(n.code,{children:"*.component.yaml"})," files respectively. This format is user-friendly and allows us to describe the structure of pages and components clearly. Just add new files in your project and start defining pages."]}),"\n",(0,t.jsx)(n.h2,{id:"page",children:"Page"}),"\n",(0,t.jsxs)(n.p,{children:["To define ",(0,t.jsx)(n.code,{children:"Login"})," page create new ",(0,t.jsx)(n.code,{children:"Login.page.yaml"})," file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Project\n\u251c\u2500\u2500 Login.page.yaml\n\u2514\u2500\u2500 Project.csproj\n"})}),"\n",(0,t.jsx)(n.p,{children:"Login page now can be accessed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"var loginPage = driver.Ya().LoginPage;\n"})}),"\n",(0,t.jsx)(n.p,{children:"It is recommended to group pages by folders."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Project\n\u251c\u2500\u2500 Pages\n|   \u251c\u2500\u2500 Administration\n|   |   \u251c\u2500\u2500 Users.page.yaml\n|   |   \u2514\u2500\u2500 Roles.page.yaml\n|   \u2514\u2500\u2500 Login.page.yaml\n\u2514\u2500\u2500 Project.csproj\n"})}),"\n",(0,t.jsx)(n.p,{children:"Yapoml follows your folders structure and separates pages by spaces."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"var loginPage = driver.Ya().Pages.LoginPage;\nvar usersPage = driver.Ya().Pages.Administration.UsersPage;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"url",children:"Url"}),"\n",(0,t.jsxs)(n.p,{children:["For better identification of the page we can declare its ",(0,t.jsx)(n.code,{children:"url"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Login.page.yaml"',children:"url: https://example.com/login\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Or relative ",(0,t.jsx)(n.code,{children:"url"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Login.page.yaml"',children:"url: /login\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It makes ",(0,t.jsx)(n.a,{href:"/docs/concepts/interactions#open",children:"navigation"})," to this page easier, or verification whether this page is ",(0,t.jsx)(n.a,{href:"/docs/concepts/expectations#isopened",children:"opened"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"loginPage.Open();\n\nloginPage.Expect().IsOpened();\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"url"})," might have segments and query parameters."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="User.page.yaml"',children:"url:\n  path: /users/{userId}\n  query:\n    - param1\n    - param2\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It is even easier to navigate to ",(0,t.jsx)(n.code,{children:"UserPage"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:'userPage.Open(userId: "123", param2: "some value");\n// navigates to /users/123?param2=some%20value\n'})}),"\n",(0,t.jsx)(n.h2,{id:"component",children:"Component"}),"\n",(0,t.jsx)(n.p,{children:"A component is a part of a web page that has its own functionality, layout, and style. It can be reused on different pages or in different parts of the same page. For example, a component can be a navigation menu, a search box, a footer, a carousel, or a custom element that you create yourself. A component can also contain other components inside it, creating a hierarchical structure of the web page."}),"\n",(0,t.jsxs)(n.p,{children:["In this example ",(0,t.jsx)(n.code,{children:"Login"})," page has ",(0,t.jsx)(n.code,{children:"Username"})," and ",(0,t.jsx)(n.code,{children:"Password"})," input fields."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Login.page.yaml"',children:"username: .user\npassword: .pass\n"})}),"\n",(0,t.jsx)(n.h3,{id:"locator",children:"Locator"}),"\n",(0,t.jsx)(n.p,{children:"Each component is identified by its locator, which tells how to locate a component on the page."}),"\n",(0,t.jsx)(n.p,{children:"Supported locator methods (case insensitive):"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"css"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"xpath"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"id"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"testid"})}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"implicit locator method",type:"tip",children:(0,t.jsxs)(n.p,{children:["If locator method is not declared explicitly, Yapoml tries to recognize it automatically. By default it treats it as ",(0,t.jsx)(n.code,{children:"xpath"})," if it's valid, otherwise as ",(0,t.jsx)(n.code,{children:"css"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["The following example shows different variants how to declare ",(0,t.jsx)(n.code,{children:"username"})," component with its css ",(0,t.jsx)(n.code,{children:".user"})," selector."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Login.page.yaml"',children:"username:\n  by:\n    css: .user\n\n# or shorter\nusername:\n  by: css .user\n\n# or shorter\nusername: css .user\n\n# or shorter\nusername: .user\n"})}),"\n",(0,t.jsx)(n.p,{children:"It's possible to define a scope where the locator should be found from."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Login.page.yaml"',children:"username:\n  by:\n    css: .user\n    from: page # parent by default\n"})}),"\n",(0,t.jsx)(n.h3,{id:"list-of-components",children:"List of components"}),"\n",(0,t.jsx)(n.p,{children:"Yapoml framework is smart enough to understand whether you define one single component located by locator, or many components located by this locator. Plural components are identified in the same way as your natural language."}),"\n",(0,t.jsx)(n.p,{children:"If you want to find all buttons on the page by specific locator, just declare it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Home.page.yaml"',children:"buttons: //button\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"buttons"})," here is a plural word, which is treated by Yapoml as it should find many elements."]}),"\n",(0,t.jsx)(n.p,{children:"Then you can use it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"foreach (var button in homePage.Buttons)\n{\n  Console.WriteLine(button.Text);\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"nested",children:"Nested"}),"\n",(0,t.jsx)(n.p,{children:"A nested component is a component that is contained inside another component, forming a parent-child relationship."}),"\n",(0,t.jsxs)(n.p,{children:["In this example ",(0,t.jsx)(n.code,{children:"menu"})," component is located in scope of ",(0,t.jsx)(n.code,{children:"header"})," component, and ",(0,t.jsx)(n.code,{children:"menu"})," component contains many menu ",(0,t.jsx)(n.code,{children:"items"})," inside."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Home.page.yaml"',children:"logo: //img\n\nheader:\n  by: .header\n\n  menu:\n    by: .//ul\n\n    items: ./li\n"})}),"\n",(0,t.jsx)(n.h3,{id:"parametrized-locator",children:"Parametrized locator"}),"\n",(0,t.jsx)(n.p,{children:"Usually all components locators can be declared deterministically. But sometimes it is beneficial to determine component's locator at runtime. Locator can be parametrized, where each parameter is provided in runtime."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Home.page.yaml"',children:"section: .//section[text()='{name}']\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"{name}"})," is treated as a parameter, and then you use it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// locates single section with "Upcoming" text\nhomePage.Section(name: "Upcoming");\n'})}),"\n",(0,t.jsx)(n.p,{children:"It also works with a list of components:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Home.page.yaml"',children:"sections: .//section[starts-with(text(), '{name}')]\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'// locates many sections which start with "A" text\nhomePage.Sections(text: "A");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"reusable-components",children:"Reusable components"}),"\n",(0,t.jsxs)(n.p,{children:["It's possible to declare a component once in ",(0,t.jsx)(n.code,{children:"*.component.yaml"})," file and reuse it across pages or components."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Select.component.yaml"',children:"options: ./option\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="Home.page.yaml"',children:"sort:\n  by: id sort\n  ref: select\n"})}),"\n",(0,t.jsx)(n.p,{children:"And now use it:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'homePage.Sort.Options.First(o => o.Text.Equals(["Relevance"])).Click();\n\n// or shorter\nhomePage.Sort.Options["Relevance"].Click();\n\n'})}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["Aliases for ",(0,t.jsx)(n.code,{children:"ref"})," keyword:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"base"})}),"\n"]})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var a=s(6540);const t={},o=a.createContext(t);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);